import json
import logging

from reptile import parser, ManifestAutoUpdate, result_data, dlc
import os
import vdf
log = logging.getLogger('ManifestAutoUpdate')
if __name__ == '__main__':
    def insert_appid(path, appid):
        dlc_file_path = path + appid + "/dlc.txt"
        if os.path.exists(dlc_file_path):
            with open(dlc_file_path, "r") as dlc_file:
                dlc_data = dlc_file.read().strip()
                log.info(f"dlc.txt 中的数据为: {dlc_data}")
                log.info("dlc.txt 存在")
        else:
            log.info(f"dlc.txt 不存在")
            log.info(f"==========================={dlc_file_path}=============================")
            return

        # 打开 appid.txt 文件并读取其中的数据
        with open(path + f"{appid}/{appid}.txt", "r") as file:
            file_data = file.readlines()
            log.info(f"appid.txt 中的数据为: {file_data}")
        insert_index = -1
        for i in range(len(file_data) - 1, -1, -1):
            if "----" in file_data[i]:
                log.info(f"存在,即将插入")
                index = file_data[i].rindex("----")  # 获取最后一个"----"的索引
                insert_index = index + 68
                break
        if insert_index != -1:
            log.info(f"dlc_data:{dlc_data}")
            log.info(f"file_data: {file_data}")
            if dlc_data + "\n" not in file_data:
                # 在最后一行的 "----" 后面的第 68 位插入 dlc.txt 中的数据
                file_data[i] = file_data[i][:insert_index] + f"\n{dlc_data}" + file_data[i][insert_index:]
            else:
                log.info("dlc.txt中的数据已存在")

        # 将更新后的数据保存回 appid.txt 文件中
        with open(path + f"{appid}/{appid}.txt", "w") as file:
            file.writelines(file_data)
            log.info(f"----------------------------------------数据插入成功--------------------------------")


    args = parser.parse_args()
    log.info(args)
    if args.x is not None:
        if args.app_id_list != "":
            for app_id in args.app_id_list:

                path = 'data/depots' + '/' + str(app_id)
                filepath = path + '/' + str(app_id) + '-ticket.txt'
                app_path = 'data/depots' + '/' + str(app_id) + '/'

                fw = open(filepath, 'w+', encoding='utf-8')
                fw.close()
                filepathonly = path + '/' + str(app_id) + '-ticket-only.txt'

                fw = open(filepathonly, 'w+', encoding='utf-8')
                fw.close()
                import vdf

                app_path = 'data/depots' + '/' + str(app_id) + '/'

                import os

                addconfig = {}
                if os.path.exists(app_path + 'config.vdf'):
                    d = vdf.load(open(app_path + 'config.vdf'))
                insert_appid(f"data/depots/", str(app_id))

                if os.path.exists(app_path + 'addconfig.vdf'):
                    print('***************************---addconfig')
                    adc = vdf.load(open(app_path + 'addconfig.vdf'))
                    addconfig = adc['depots']

                    for key in addconfig.keys():
                        d['depots'][key] = addconfig[key]

                    with open(app_path + 'config.vdf', 'w') as f:
                        vdf.dump(d, f, pretty=True)


                def getDecryptionKey(path):
                    fr = open(path, 'r', encoding='utf-8')
                    lines = fr.readlines()
                    totals = []
                    i = 0
                    while i < len(lines):
                        if lines[i].count('DecryptionKey') == 0:
                            i = i + 1
                            continue
                        key = lines[i - 2].strip().replace('"', '')
                        value = lines[i].split('"')[-2]
                        totals.append(key + '----' + value)

                        i = i + 1


                def jiami(code):
                    url = 'http://47.98.52.241:8081/encryption'
                    res = requests.post(url, code)
                    return res.text


                dkeys = getDecryptionKey(app_path + 'config.vdf')

                # os.remove(path + '/'+str(app_id) + '-ticket'+ '.txt')
                filepath = path + '/' + str(app_id) + '.txt'
                fr = open(filepath, 'r', encoding='utf-8')
                apptxts = fr.readlines()
                fr.close()
                fw = open(filepath, 'w+', encoding='utf-8')
                fw.write(apptxts[0].strip() + '\n')
                for item in dkeys:
                    fw.write(item + '\n')
                for item in apptxts[1:]:
                    fw.write(item.strip() + '\n')

                fw.close()
                fr = open(filepath, 'r', encoding='utf-8')
                tlines = fr.readlines()
                fr.close()
                tls = []
                fw = open(filepath, 'w+', encoding='utf-8')
                for line in tlines:
                    if line not in tls:
                        fw.write(line)
                        tls.append(line)
                fw.close()


                def upload_aliyun(dst_file, local_file):
                    import oss2
                    yourAccessKeyId = 'LTAI5tJG95GpSGr4jXeyu554'
                    yourAccessKeySecret = 'pnz5ubi9Au4VSW7Psrfl1hhc0gXisQ'
                    auth = oss2.Auth(yourAccessKeyId, yourAccessKeySecret)
                    end_point = 'oss-cn-hangzhou.aliyuncs.com'
                    bucket_name = 'laksdjflkajs'
                    bucket = oss2.Bucket(auth, end_point, bucket_name)
                    bucket.put_object_from_file(dst_file, local_file)
                    return True


                upload_aliyun('gKeyConfig/' + str(app_id) + '.txt', filepath)
                import os

                files = os.listdir(path)
                fw = open('temp.txt', 'w+', encoding='utf-8')

                for file in files:
                    if file.endswith('fest') or file.endswith('svd'):
                        fw.write(file.split('.')[0] + '\n')
                        upload_aliyun('depotcache/' + str(app_id) + '/' + file, path + '/' + file)

                fw.close()
                upload_aliyun('depotcache/' + str(app_id) + '/' + str(app_id) + '.txt', 'temp.txt')
                # os.remove('temp.txt')

            print('fff main.py 1176.....')
            print('final      上传成功1！')

    # =============================这里我缩了一格上面部分
    else:
        ManifestAutoUpdate(args.credential_location, level=args.level, pool_num=args.pool_num, retry_num=args.retry_num,
                           update_wait_time=args.update_wait_time, key=args.key, init_only=args.init_only,
                           cli=args.cli, app_id_list=args.app_id_list, user_list=args.user_list).run(update=args.update)
        # print(result_data)
        # print(dlc)
        format_url_list = [
            "https://gh-proxy.com/https://raw.githubusercontent.com/heyong5454/ManifestAutoUpdate/{sha}/{path}",
            "https://github.moeyy.xyz/https://raw.githubusercontent.com/heyong5454/ManifestAutoUpdate/{sha}/{path}",
            "https://ghproxy.com/https://raw.githubusercontent.com/heyong5454/ManifestAutoUpdate/{sha}/{path}",
            "https://hub.fgit.ml/heyong5454/ManifestAutoUpdate/raw/{sha}/{path}",
            "https://hub.yzuu.cf/heyong5454/ManifestAutoUpdate/raw/{sha}/{path}",
            "https://raw.kgithub.com/heyong5454/ManifestAutoUpdate/{sha}/{path}",
            "https://hub.nuaa.cf/heyong5454/ManifestAutoUpdate/raw/{sha}/{path}"
        ]
        data = {}
        #log.info(f"result_data: {result_data}")
        for _app_id in result_data:
            depot_id_list = []
            manifest_gid_list = []
            data[_app_id] = {
                "app_id": _app_id,
                "depot_id_list": [],
                "dlc": [],
                "format_url_list": format_url_list,
                "manifest_gid_list": [],
                "show": True
            }
            path = 'data/depots' + '/' + str(_app_id)
            filepath = path + '/' + str(_app_id) + '-ticket.txt'
            app_path = 'data/depots' + '/' + str(_app_id) + '/'

            if os.path.exists(filepath) and os.path.exists(app_path + 'addconfig.vdf'):
                print('上次已爬取')
            else:
                #fw = open(filepath, 'w+', encoding='utf-8')
                #fw.close()
                log.info("无")
            filepathonly = path + '/' + str(_app_id) + '-ticket-only.txt'
            if os.path.exists(filepathonly) and os.path.exists(app_path + 'addconfig.vdf'):
                print('')
            else:
                # fw = open(filepathonly, 'w+', encoding='utf-8')
                # fw.close()
                log.info("无")

            for depot_id, gid_set in result_data[_app_id].items():
                for gid in gid_set:
                    depot_id_list.append(depot_id)
                    manifest_gid_list.append(gid)
            data[_app_id]["depot_id_list"] = depot_id_list
            data[_app_id]["manifest_gid_list"] = manifest_gid_list

            log.info(f"manifest_gid_list: {manifest_gid_list}")
            if _app_id in dlc:
                data[_app_id]["dlc"] = dlc[_app_id]
        log.info(json.dumps(data, sort_keys=True, indent=4, separators=(',', ': ')))
        if args.app_id_list != "":
            for app_id in args.app_id_list:
                path = 'data/depots' + '/' + str(app_id)
                filepath = path + '/' + str(app_id) + '-ticket.txt'
                app_path = 'data/depots' + '/' + str(app_id) + '/'
                try:
                    fw = open(filepath, 'w+', encoding='utf-8')
                    fw.close()
                    filepathonly = path + '/' + str(app_id) + '-ticket-only.txt'
                    fw = open(filepathonly, 'w+', encoding='utf-8')
                    fw.close()
                except:
                    log.info('error')

                app_path = 'data/depots' + '/' + str(app_id) + '/'

                addconfig = {}
                if os.path.exists(app_path + 'config.vdf'):
                    d = vdf.load(open(app_path + 'config.vdf'))
                insert_appid(f"data/depots/", str(app_id))
                if os.path.exists(app_path + 'addconfig.vdf'):
                    print('***************************---addconfig')
                    adc = vdf.load(open(app_path + 'addconfig.vdf'))
                    addconfig = adc['depots']

                    for key in addconfig.keys():
                        d['depots'][key] = addconfig[key]

                    with open(app_path + 'config.vdf', 'w') as f:
                        vdf.dump(d, f, pretty=True)


                # =============================这里我缩了一格
                def getDecryptionKey(path):
                    fr = open(path, 'r', encoding='utf-8')
                    lines = fr.readlines()
                    totals = []
                    i = 0
                    while i < len(lines):
                        if lines[i].count('DecryptionKey') == 0:
                            i = i + 1
                            continue
                        key = lines[i - 2].strip().replace('"', '')
                        value = lines[i].split('"')[-2]
                        totals.append(key + '----' + value)

                        i = i + 1
                    return totals


                import requests


                def jiami(code):
                    url = 'http://47.98.52.241:8081/encryption'
                    res = requests.post(url, code)
                    return res.text


                dkeys = getDecryptionKey(app_path + 'config.vdf')

                # os.remove(path + '/'+str(app_id) + '-ticket'+ '.txt')
                filepath = path + '/' + str(app_id) + '.txt'
                fr = open(filepath, 'r', encoding='utf-8')
                apptxts = fr.readlines()
                fr.close()
                fw = open(filepath, 'w+', encoding='utf-8')
                fw.write(apptxts[0].strip() + '\n')
                for item in dkeys:
                    fw.write(item + '\n')
                for item in apptxts[1:]:
                    fw.write(item.strip() + '\n')

                fw.close()
                fr = open(filepath, 'r', encoding='utf-8')
                tlines = fr.readlines()
                fr.close()
                tls = []
                fw = open(filepath, 'w+', encoding='utf-8')
                for line in tlines:
                    if line not in tls:
                        fw.write(line)
                        tls.append(line)
                fw.close()


                def upload_aliyun(dst_file, local_file):
                    import oss2
                    yourAccessKeyId = 'LTAI5tJG95GpSGr4jXeyu554'
                    yourAccessKeySecret = 'pnz5ubi9Au4VSW7Psrfl1hhc0gXisQ'
                    auth = oss2.Auth(yourAccessKeyId, yourAccessKeySecret)
                    end_point = 'oss-cn-hangzhou.aliyuncs.com'
                    bucket_name = 'laksdjflkajs'
                    bucket = oss2.Bucket(auth, end_point, bucket_name)
                    bucket.put_object_from_file(dst_file, local_file)
                    return True


                upload_aliyun('gKeyConfig/' + str(app_id) + '.txt', filepath)
                import os

                files = os.listdir(path)
                fw = open('temp.txt', 'w+', encoding='utf-8')

                for file in files:
                    if file.endswith('fest') or file.endswith('svd'):
                        fw.write(file.split('.')[0] + '\n')
                        upload_aliyun('depotcache/' + str(app_id) + '/' + file, path + '/' + file)

                fw.close()
                upload_aliyun('depotcache/' + str(app_id) + '/' + str(app_id) + '.txt', 'temp.txt')
                # os.remove('temp.txt')
                print('final      上传成功！')
